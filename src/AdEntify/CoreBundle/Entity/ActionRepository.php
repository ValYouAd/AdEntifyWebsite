<?php

namespace AdEntify\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{
    /**
     * Create action and notification if necessary
     *
     * @param $actionType
     * @param User $owner
     * @param User $author
     * @param null $photos
     * @param string $visibility
     * @param null $linkedObjectId
     * @param null $linkedObjectType
     * @param bool $createNotification
     * @param null $message
     * @param null $messageOptions
     * @return array
     */
    public function createAction($actionType, User $author = null, User $target = null, $photos = null, $visibility = Action::VISIBILITY_PUBLIC,
                                 $linkedObjectId = null, $linkedObjectType = null, $createNotification = true,
                                 $message = null, $messageOptions = null, User $notificationOwner = null)
    {
        $action = null;
        // Check if same action already exist
        switch ($actionType) {
            case Action::TYPE_PHOTO_COMMENT:
                $action = null;
                break;
            case Action::TYPE_PHOTO_TAG:
                $linkedObjectType = get_class(new Tag());
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_PHOTO_FAVORITE:
                $linkedObjectType = get_class(new Photo());
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_PHOTO_LIKE:
                $linkedObjectType = get_class(new Photo());
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_USER_FOLLOW:
                $linkedObjectType = get_class(new User());
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_REWARD_NEW:
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_PHOTO_UPLOAD:
                $action = null;
                break;
        }

        // If action already exist, don't create it.
        if ($action)
            return $action;

        // Notification
        $notification = null;
        if ($createNotification) {
            $notification = new Notification();
            $notification->setType($actionType);
            $this->getEntityManager()->persist($notification);
        }

        if ($author) {
            $action = new Action();
            $action->setType($actionType)->setAuthor($author)->setVisibility($visibility);
            if ($notification)
                $notification->setAuthor($author);
        }
        if ($photos) {
            foreach($photos as $photo) {
                if ($action)
                    $action->addPhoto($photo);
                if ($notification)
                    $notification->addPhoto($photo);
            }
        }
        if ($target) {
            if ($action)
                $action->setTarget($target);
            if ($notification)
                $notification->setOwner($target);
        }
        if ($linkedObjectId) {
            if ($action)
                $action->setLinkedObjectId($linkedObjectId);
            if ($notification)
                $notification->setObjectId($linkedObjectId);
        }
        if ($linkedObjectType) {
            if ($action)
                $action->setLinkedObjectType($linkedObjectType);
            if ($notification)
                $notification->setObjectType($linkedObjectType);
        }
        if ($message) {
            if ($action)
                $action->setMessage('action.'.$message);
            if ($notification)
                $notification->setMessage('notification.'.$message);
        }
        if ($messageOptions) {
            if ($action)
                $action->setMessageOptions($messageOptions);
            if ($notification)
                $notification->setMessageOptions($messageOptions);
        }
        if ($notificationOwner) {
            $notification->setOwner($notificationOwner);
        }

        if ($action) {
            $this->getEntityManager()->persist($action);
        }

        // Check if notification has owner
        if ($notification && !$notification->getOwner())
            $notification = null;

        $this->getEntityManager()->flush();

        return array(
            'action' => $action,
            'notification' => $notification
        );
    }

    private function getExistingAction($actionType, $author, $target, $linkedObjectId = null, $linkedObjectType  = null)
    {
        $parameters = array(
            'actionType' => $actionType,
            'author' => $author ? $author->getId() : 0,
            'target' => $target ? $target->getId() : 0,
            'linkedObjectId' => $linkedObjectId ? $linkedObjectId : 0
        );

        $sql = 'SELECT action FROM AdEntify\CoreBundle\Entity\Action action
                    WHERE action.type = :actionType AND action.author = :author AND action.target = :target
                    AND action.linkedObjectId = :linkedObjectId';

        if ($linkedObjectType)
        {
            $parameters['linkedObjectType'] = $linkedObjectType;
            $sql .= ' AND action.linkedObjectType = :linkedObjectType';
        }

        return $this->getEntityManager()->createQuery($sql)
            ->setParameters($parameters)->getOneOrNullResult();
    }
}
