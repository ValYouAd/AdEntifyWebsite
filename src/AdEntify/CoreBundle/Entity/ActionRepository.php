<?php

namespace AdEntify\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{
    /**
     * Create action and notification if necessary
     *
     * @param $actionType
     * @param User $owner
     * @param User $author
     * @param null $photos
     * @param string $visibility
     * @param null $linkedObjectId
     * @param null $linkedObjectType
     * @param bool $createNotification
     * @param null $message
     * @param null $messageOptions
     * @return array
     */
    public function createAction($actionType, User $author = null, User $target = null, $photos = null, $visibility = Action::VISIBILITY_PUBLIC,
                                 $linkedObjectId = null, $linkedObjectType = null, $createNotification = true,
                                 $message = null, $messageOptions = null, User $notificationOwner = null, Brand $brand = null)
    {
        $action = $this->getActionByActionType($actionType, $author, $target, $linkedObjectId, $linkedObjectType, $brand);

        // If action already exist, don't create it.
        if ($action)
            return $action;

        // Notification
        $notification = null;
        if ($createNotification) {
            $notification = new Notification();
            $notification->setType($actionType);
            $this->getEntityManager()->persist($notification);
        }

        if ($author) {
            $action = new Action();
            $action->setType($actionType)->setAuthor($author)->setVisibility($visibility);
            if ($notification)
                $notification->setAuthor($author);
        }
        if ($photos) {
            foreach($photos as $photo) {
                if ($action)
                    $action->addPhoto($photo);
                if ($notification)
                    $notification->addPhoto($photo);
            }
        }
        if ($target) {
            if ($action)
                $action->setTarget($target);
            if ($notification)
                $notification->setOwner($target);
        }
        if ($linkedObjectId) {
            if ($action)
                $action->setLinkedObjectId($linkedObjectId);
            if ($notification)
                $notification->setObjectId($linkedObjectId);
        }
        if ($linkedObjectType) {
            if ($action)
                $action->setLinkedObjectType($linkedObjectType);
            if ($notification)
                $notification->setObjectType($linkedObjectType);
        }
        if ($message) {
            if ($action)
                $action->setMessage('action.'.$message);
            if ($notification)
                $notification->setMessage('notification.'.$message);
        }
        if ($messageOptions) {
            if ($action)
                $action->setMessageOptions($messageOptions);
            if ($notification)
                $notification->setMessageOptions($messageOptions);
        }
        if ($notificationOwner) {
            $notification->setOwner($notificationOwner);
        }
        if ($brand) {
            if ($action)
                $action->setBrand($brand);
            if ($notification)
                $notification->setBrand($brand);
        }

        if ($action) {
            $this->getEntityManager()->persist($action);
        }

        // Check if notification has owner
        if ($notification && !$notification->getOwner())
            $notification = null;

        $this->getEntityManager()->flush();

        return array(
            'action' => $action,
            'notification' => $notification
        );
    }

    /**
     * Remove action
     *
     * @param $actionType
     * @param User $author
     * @param User $target
     * @param null $linkedObjectId
     * @param null $linkedObjectType
     * @param Brand $brand
     */
    public function removeAction($actionType, User $author = null, User $target = null, $linkedObjectId = null,
                                 $linkedObjectType = null, Brand $brand = null, $deleteNotification = true)
    {
        $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType, $brand);
        if ($action) {
            $this->getEntityManager()->remove($action);
        }
        if ($deleteNotification) {
            $this->getEntityManager()->getRepository('AdEntifyCoreBundle:Notification')->removeNotification($author, $target,
                $linkedObjectId, $linkedObjectType, $brand);
        }
    }

    /**
     * Get existing action by action type
     *
     * @param $actionType
     * @param $author
     * @param $target
     * @param null $linkedObjectId
     * @param null $linkedObjectType
     * @param null $brand
     * @return mixed|null
     */
    private function getActionByActionType($actionType, $author, $target, $linkedObjectId = null, $linkedObjectType  = null, $brand = null)
    {
        $action = null;
        // Check if same action already exist
        switch ($actionType) {
            case Action::TYPE_PHOTO_COMMENT:
                $action = null;
                break;
            case Action::TYPE_PHOTO_TAG:
                $linkedObjectType = $this->getEntityManager()->getClassMetadata(get_class(new Tag()))->getName();
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_PHOTO_FAVORITE:
            case Action::TYPE_PHOTO_LIKE:
                $linkedObjectType = $this->getEntityManager()->getClassMetadata(get_class(new Photo()))->getName();
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_USER_FOLLOW:
                $linkedObjectType = $this->getEntityManager()->getClassMetadata(get_class(new User()))->getName();
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_REWARD_NEW:
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType);
                break;
            case Action::TYPE_PHOTO_UPLOAD:
                $action = null;
                break;
            case Action::TYPE_BRAND_FOLLOW:
            case Action::TYPE_PHOTO_BRAND_TAG:
                $action = $this->getExistingAction($actionType, $author, $target, $linkedObjectId, $linkedObjectType, $brand);
                break;
        }
        return $action;
    }

    /**
     * Get existing action
     *
     * @param $actionType
     * @param $author
     * @param $target
     * @param null $linkedObjectId
     * @param null $linkedObjectType
     * @param null $brand
     * @return mixed
     */
    private function getExistingAction($actionType, $author, $target, $linkedObjectId = null, $linkedObjectType  = null, $brand = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $parameters = array(
            'actionType' => $actionType,
        );

        $qb->select('Action')
            ->from('AdEntifyCoreBundle:Action', 'Action')
            ->where($qb->expr()->eq('Action.type', ':actionType'))
            ->orderBy('Action.id', 'DESC');

        if ($author) {
            $qb->andWhere($qb->expr()->eq('Action.author', ':author'));
            $parameters['author'] = $author->getId();
        }
        if ($target) {
            $qb->andWhere($qb->expr()->eq('Action.target', ':target'));
            $parameters['target'] = $target->getId();
        }
        if ($linkedObjectId) {
            $qb->andWhere($qb->expr()->eq('Action.linkedObjectId', ':linkedObjectId'));
            $parameters['linkedObjectId'] = $linkedObjectId;
        }
        if ($linkedObjectType) {
            $qb->andWhere($qb->expr()->eq('Action.linkedObjectType', ':linkedObjectType'));
            $parameters['linkedObjectType'] = $linkedObjectType;
        }
        if ($brand) {
            $qb->andWhere($qb->expr()->eq('Action.brand', ':brand'));
            $parameters['brand'] = $brand->getId();
        }

        $qb->setParameters($parameters)->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
